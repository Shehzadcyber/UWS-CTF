Flag: UWS{Huge_e_SmaLL_d_and_wieneR_AttAck}


Solution Exploit Code:


```
from Crypto.Util.number import *
from sympy import *
from sympy.ntheory.continued_fraction import continued_fraction_convergents, continued_fraction_iterator
from math import isqrt

# --- Public key values ---
n = 609983533322177402468580314139090006939877955334245068261469677806169434040069069770928535701086364941983428090933795745853896746458472620457491993499511798536747668197186857850887990812746855062415626715645223089415186093589721763366994454776521466115355580659841153428179997121984448771910872629371808169183

e = 387825392787200906676631198961098070912332865442137539919413714790310139653713077586557654409565459752133439009280843965856789151962860193830258244424149230046832475959852771134503754778007132465468717789936602755336332984790622132641288576440161244396963980583318569320681953570111708877198371377792396775817

# --- Step 1: Wiener's Attack to recover private key ---
def wiener_attack(e, n):
    for conv in continued_fraction_convergents(continued_fraction_iterator(Rational(e, n))):
        k = conv.p
        d = conv.q
        if k == 0:
            continue
        if (e * d - 1) % k != 0:
            continue
        phi = (e * d - 1) // k

        a = 1
        b = -(n - phi + 1)
        c = n
        disc = b * b - 4 * a * c
        if disc < 0:
            continue
        sqrt_disc = isqrt(disc)
        if sqrt_disc * sqrt_disc != disc:
            continue
        p = (-b + sqrt_disc) // 2
        q = (-b - sqrt_disc) // 2
        if p * q == n:
            return d
    return None

print("[*] Starting Wiener's Attack...")
d = wiener_attack(e, n)

if d is None:
    print("[-] Failed to recover private key using Wiener's Attack.")
    exit(1)

print(f"[+] Private exponent recovered:\nd = {d}")

# --- Step 2: Decrypt the ciphertext ---
try:
    with open("flag.enc", "rb") as f:
        c_bytes = f.read()
except FileNotFoundError:
    print("[-] File 'flag.enc' not found. Place it in the same directory as this script.")
    exit(1)

c = bytes_to_long(c_bytes)
m = pow(c, d, n)
flag = long_to_bytes(m)

print(f"[+] Decrypted Flag:\n{flag.decode()}")

```